# Import necessary libraries
import folium
from folium.plugins import HeatMap
import pandas as pd
import numpy as np
import openpyxl

# Global variables to store configuration
CONFIG = {}

def define_heatmap_parameters(
    df, 
    config_params=None
):
    """
    Define parameters for the heatmap visualization.
    
    Parameters:
    -----------
    df : pandas.DataFrame
        The dataset containing location and measure data
    config_params : dict, optional
        Dictionary containing custom configuration parameters.
    """
    global CONFIG
    
    # Set up default configuration
    default_config = {
        'lat_col': 'Lat',
        'long_col': 'Long',
        'measure_cols': {
            'Building Staff': 'POD Total',
            'SAMPLE_Ticket Volume': 'Ticket_Volume',
            'SAMPLE_Call Volume': 'Call_Volume'
        },
        'default_measure': 'POD Total',
        'marker_color_col': 'UNS',
        'tooltip_cols': {
            'Building Name': 'BUILDING NAME',
            'Address': 'Address_String',
            #'Region': 'Region',
            'Building Staffing': 'POD Total',
            'UNS Staff': 'UNS',
            'EFO Staff': 'EFO', 
            'CSS Staff': 'CSS',
            'OSS Staff': 'OSS',
            'UC Staff': 'UC', 
            'SP&I Staff': 'SP&I',
            'CCSD Staff': 'CCSD'
        },
        'zoom_start': 5,
        'radius_multiplier': 1.0,
        'bold_labels': ['Building Name', 'Building Staffing'],
        'marker_style': {
            #'type': 'div_icon', #Options: 'default', 'div_icon', 'circle'
            #'size': 12,  # Size in pixels (default markers are around 20px)
            'border_color': '#000000',
            'border_width': 1
        },
        'marker_config': {
            'scale_percent': 60, # 60% of default size
            'custom_icon': False # Whhether to use a custom icon or scale the default
        }
    }
    
    # Update with user-provided configuration if available
    if config_params:
        for key, value in config_params.items():
            if isinstance(value, dict) and key in default_config and isinstance(default_config[key], dict):
                # For nested dictionaries, update instead of replace
                default_config[key].update(value)
            else:
                default_config[key] = value
    
    # Make a copy of the dataframe to avoid modifying the original
    df_copy = df.copy()
    
    # Convert string coordinates to float
    df_copy[default_config['lat_col']] = pd.to_numeric(df_copy[default_config['lat_col']], errors='coerce')
    df_copy[default_config['long_col']] = pd.to_numeric(df_copy[default_config['long_col']], errors='coerce')
    
    # Convert measure columns to numeric
    for _, col in default_config['measure_cols'].items():
        df_copy[col] = pd.to_numeric(df_copy[col], errors='coerce')
    
    # Convert staff columns to numeric (for marker coloring)
    df_copy['UNS'] = pd.to_numeric(df_copy['UNS'], errors='coerce')
    if 'EFO' in df_copy.columns:
        df_copy['EFO'] = pd.to_numeric(df_copy['EFO'], errors='coerce')
    if 'CSS' in df_copy.columns:
        df_copy['CSS'] = pd.to_numeric(df_copy['CSS'], errors='coerce')
    if 'OSS' in df_copy.columns:
        df_copy['OSS'] = pd.to_numeric(df_copy['OSS'], errors='coerce')
    if 'UC' in df_copy.columns:
        df_copy['UC'] = pd.to_numeric(df_copy['UC'], errors='coerce')
    if 'SP&I' in df_copy.columns:
        df_copy['SP&I'] = pd.to_numeric(df_copy['SP&I'], errors='coerce')
    if 'CCSD' in df_copy.columns:
        df_copy['CCSD'] = pd.to_numeric(df_copy['CCSD'], errors='coerce')
    
    # Calculate map center
    center = [df_copy[default_config['lat_col']].mean(), df_copy[default_config['long_col']].mean()]
    
    # Debug information
    print(f"Latitude range: {df_copy[default_config['lat_col']].min()} to {df_copy[default_config['lat_col']].max()}")
    print(f"Longitude range: {df_copy[default_config['long_col']].min()} to {df_copy[default_config['long_col']].max()}")
    for measure, col in default_config['measure_cols'].items():
        print(f"{measure} range: {df_copy[col].min()} to {df_copy[col].max()}")
    print(f"Map center set to: {center}")
    
    # Store combined configuration in global variable
    CONFIG = default_config.copy()
    CONFIG['dataframe'] = df_copy
    CONFIG['center'] = center
    
    return CONFIG


def generate_heatmap(output_file='heatmap.html'):
    """
    Generate a Folium heatmap with markers based on the configuration set by define_heatmap_parameters.
    
    Parameters:
    -----------
    output_file : str, default='heatmap.html'
        Filename for the exported HTML map
        
    Returns:
    --------
    folium.Map
        The generated Folium map object
    """
    global CONFIG
    
    if not CONFIG:
        raise ValueError("Configuration not set. Call define_heatmap_parameters first.")
    
    # Extract configuration
    df = CONFIG['dataframe']
    lat_col = CONFIG['lat_col']
    long_col = CONFIG['long_col']
    measure_cols = CONFIG['measure_cols']
    default_measure = CONFIG['default_measure']
    center = CONFIG['center']
    zoom_start = CONFIG.get('zoom_start', 5)
    tooltip_cols = CONFIG['tooltip_cols']
    bold_labels = CONFIG.get('bold_labels', [])
    marker_config = CONFIG.get('marker_config', {})
    scale_percent = marker_config.get('scale_percent', 100) / 100 #Convert to decimal
    use_custom_icon = marker_config.get('custom_icon', False)

    
    # Create base map
    m = folium.Map(location=center, zoom_start=zoom_start)
    
    # Add feature groups for each measure
    for group_name, measure_col in measure_cols.items():
        fg = folium.FeatureGroup(name=group_name)
        
        # Prepare data for heatmap
        heat_data = []
        for _, row in df.iterrows():
            # Skip rows with missing coordinates or measure values
            if pd.isna(row[lat_col]) or pd.isna(row[long_col]) or pd.isna(row[measure_col]):
                continue
                
            heat_data.append([
                float(row[lat_col]), 
                float(row[long_col]), 
                float(row[measure_col])
            ])
        
        # Add heatmap to feature group
        HeatMap(
            heat_data,
            radius=15,
            max_zoom=13,
            blur=10
        ).add_to(fg)
        
        # Add feature group to map
        fg.add_to(m)
    
    
    # Sort the dataframe by the default measures
    # This will make the markers with the higher values appear on top when zoomed out
    sorted_df = df.sort_values(by=measure_cols['Building Staff'], ascending=True)
    
    # Add markers for each location
    for _, row in df.iterrows():
        # Skip rows with missing coordinates
        if pd.isna(row[lat_col]) or pd.isna(row[long_col]):
            continue
            
        # Determine marker color based on Internal_Staff
        color = 'red' if row['UNS'] == 0 else 'blue'
        
        # Create tooltip content directly here instead of using a separate function
        tooltip_content = ""
        
        # Add tooltip labels and values from CONFIG
        for label, col in tooltip_cols.items():
            if col in row.index:
                value = row[col]
                
                # Make some labels bold based on CONFIG
                if label in bold_labels:
                    tooltip_content += f"<strong>{label}: {value}</strong><br>"
                else:
                    tooltip_content += f"{label}: {value}<br>"
       
        # Add group-specific staff info if available
        #if 'EFO' in row.index and 'CSS' in row.index:
            #tooltip_content += f"{row['EFO']} | {row['CSS']}"
       
        if use_custom_icon:
            # Use FontAwesome with a size that scales
            icon = folium.Icon(
                color=color,
                icon='map-marker', # Using FontAwesome icon
                prefix='fa',
                icon_size=[int(20 * scale_percent), int(20 * scale percent)],
                icon_anchor=[int(10 * scale_percent), int(20 * scale_percent)]
            )
        else:
            icon_html = f'''
                <div sttyle='font-size: 1rem; transform: scale({scale_percent});">
                    <i class="fa fa-map-marker" style="color: {color};"</i>
                </div>
            '''
            icon = folium.DivIcon(
                html=icon_html,
                icon_size=[int(20 * scale_percent), int(20 * scale percent)],
                icon_anchor=[int(10 * scale_percent), int(20 * scale_percent)]
            )
    
        # Create marker with tooltip
        folium.Marker(
            location=[float(row[lat_col]), float(row[long_col])],
            tooltip=folium.Tooltip(tooltip_content),
            icon=icon
            '''
            icon=folium.Icon(
                color=color,
                icon_size=marker_config.get('icon_size', [25, 41]), # Use config or default
                icon_anchor=marker_config.get('icon_anchor', [12, 41]) # Use config or default
            )
            '''
        ).add_to(m)
    
    # Add layer control
    folium.LayerControl().add_to(m)
    
    # Save map to HTML file
    m.save(output_file)
    print(f"Map saved to {output_file}")
    
    return m


# Example usage
if __name__ == "__main__":

    # Specify the file path
    file_path = "/home/mgfwb/Data Files/POD-Mapping_clean.xlsx"

    # Read the Excel file
    # - file_path: The path to the Excel file
    # - engine='openpyxl': Specifies the engine to use for reading .xlsx files
    df = pd.read_excel(file_path, engine='openpyxl')
    
    # Define heatmap parameters
    define_heatmap_parameters(df=df)
    
    # Generate and save the heatmap
    map_object = generate_heatmap(output_file='location_heatmap_v6.html')
    
    print("Done! Open location_heatmap.html in your browser to view the map.")
